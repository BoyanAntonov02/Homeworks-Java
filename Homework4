import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;


enum EmployerType {

    PERMANENT(BigDecimal.valueOf(0)),PART_TIME(BigDecimal.valueOf(0)),TRAINEE(BigDecimal.valueOf(0));
    private BigDecimal minSalary;
    EmployerType(BigDecimal minSalary){this.minSalary = minSalary;}

    public BigDecimal getMinSalary() {
        return minSalary;
    }

    public void setMinSalary(BigDecimal minSalary) {
        if(minSalary.compareTo(BigDecimal.valueOf(0))!=-1){
            this.minSalary = minSalary;
        }
        else this.minSalary =BigDecimal.valueOf(0);
    }

}

class Employee {
    private String name;
    private final int id;
    private static int idCnt = 1;
    private int workHours;
    private EmployerType employerType;
    private BigDecimal extraMoney;

    public Employee(String name, int workHours,BigDecimal extraMoney,EmployerType employerType) {
        this.name = name;
        this.id= idCnt;
        idCnt++;
        setWorkHours(workHours);
        setExtraMoney(extraMoney);
        this.employerType = employerType;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public static int getIdCnt() {
        return idCnt;
    }

    public static void setIdCnt(int idCnt) {
        Employee.idCnt = idCnt;
    }

    public int getWorkHours() {
        return workHours;
    }

    public void setWorkHours(int workHours) {
        if(workHours>0){
            this.workHours = workHours;
        }
        else{
            this.workHours = 0;
        }
    }

    public EmployerType getEmployerType() {
        return employerType;
    }

    public void setEmployerType(EmployerType employerType) {
        this.employerType = employerType;
    }

    public BigDecimal getExtraMoney() {
        return extraMoney;
    }

    public void setExtraMoney(BigDecimal extraMoney) {
        if(extraMoney.compareTo(BigDecimal.valueOf(0)) != -1) {
            this.extraMoney = extraMoney;
        }
        else extraMoney=BigDecimal.valueOf(0);
    }

    public BigDecimal salery(){

        return (employerType.getMinSalary().add(extraMoney)).multiply(BigDecimal.valueOf(workHours));
    }

    public boolean increaseSalary(BigDecimal procent){
        if(procent.compareTo(BigDecimal.valueOf(0)) == 1) {
            extraMoney=extraMoney.add(extraMoney.multiply(procent).divide(BigDecimal.valueOf(100)));

            return true;
        }
        return false;
    }

}

class Company {
    private String name;
    private int maxEmployers;
    private List<Employee> employeeList;
    private int currentEmployers;

    public Company(String name, int maxEmployers) {
        this.name = name;
        setMaxEmployers(maxEmployers);
        currentEmployers=0;
        employeeList= new ArrayList<>();
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getMaxEmployers() {
        return maxEmployers;
    }

    public void setMaxEmployers(int maxEmployers) {
        if(maxEmployers>0){
            this.maxEmployers = maxEmployers;
        }
        else this.maxEmployers = 0;
    }

    public List<Employee> getEmployeeList() {
        return employeeList;
    }

    public void setEmployeeList(List<Employee> employeeList) {
        this.employeeList = employeeList;
    }

    public boolean hireEmployee(Employee employee1){
        for (Employee employee : employeeList) {
            if (employee.equals(employee1)) {
                return false;
            }
        }
        if(currentEmployers < maxEmployers){
            currentEmployers++;
            employeeList.add(employee1);
            return true;
        }
        return false;
    }

    public boolean fireEmployee(Employee employee){

        if(currentEmployers>0){
            currentEmployers--;
            employeeList.remove(employee);
            return true;
        }
        return false;
    }

    public BigDecimal averageSalary(){
        BigDecimal allSalerys = BigDecimal.valueOf(0);
        if(currentEmployers>0) {
            for (Employee employee : employeeList) {
                allSalerys = allSalerys.add(employee.salery());
            }
            return allSalerys.divide(BigDecimal.valueOf(currentEmployers),2, RoundingMode.HALF_UP);
        }
        return allSalerys;
    }

    public boolean increaseSalaries(BigDecimal percent){
        if(currentEmployers>0) {
            if (percent.compareTo(BigDecimal.valueOf(0)) == 1) {
                for (Employee employee : employeeList) {
                    employee.increaseSalary(percent);
                }
            }
            return true;
        }
        return false;

    }

    public BigDecimal averageSalaryPerContractType(EmployerType typeOfEmployer){
        BigDecimal allSalerys = BigDecimal.valueOf(0);
        if(currentEmployers>0) {
            int cnt = 0;

            for (Employee employee : employeeList) {
                if (employee.getEmployerType().equals(typeOfEmployer)) {

                    allSalerys = allSalerys.add(employee.salery());
                    cnt++;
                }
            }
            if(cnt > 0) {
                return allSalerys.divide(BigDecimal.valueOf(cnt), 2, RoundingMode.HALF_UP);
            }
        }
        return allSalerys;
    }

}


public class Soultion {
    public static void main(String[] args) throws IOException {

        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        String companyName = bufferedReader.readLine();

        int maxNumberOfEmployees = Integer.parseInt(bufferedReader.readLine().trim());

        List<Double> minSalaryList = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                .map(Double::parseDouble)
                .collect(toList());

        List<String> namesList = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                .collect(toList());

        List<Integer> workedHoursList = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                .map(Integer::parseInt)
                .collect(toList());

        List<String> contractTypeList = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                .collect(toList());

        List<Double> additionalSalaryList = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                .map(Double::parseDouble)
                .collect(toList());

        String contractType = bufferedReader.readLine();

        double increasePercentage = Double.parseDouble(bufferedReader.readLine().trim());

        // Set the min salary per hour, that depends on the contract type. Use the values in the minSalaryList: the first value is for PERMANENT, the second is for PART_TIME, the third is for TRAINEE
        EmployerType.PERMANENT.setMinSalary(BigDecimal.valueOf(minSalaryList.get(0)));
        EmployerType.PART_TIME.setMinSalary(BigDecimal.valueOf(minSalaryList.get(1)));
        EmployerType.TRAINEE.setMinSalary(BigDecimal.valueOf(minSalaryList.get(2)));
        // Create company by using companyName and maxNumberOfEmployees
        Company company=new Company(companyName,maxNumberOfEmployees);


        // Create 6 employees by using the values in the namesList, workedHoursList, contractTypeList, and additionalSalaryList. Example for creating the first employee:  Employee employee1 = new Employee(namesList.get(0), workedHoursList.get(0), BigDecimal.valueOf(additionalSalaryList.get(0)), ContractType.valueOf(contractTypeList.get(0)));
        Employee employee1 = new Employee(namesList.get(0), workedHoursList.get(0), BigDecimal.valueOf(additionalSalaryList.get(0)), EmployerType.valueOf(contractTypeList.get(0)));
        Employee employee2 = new Employee(namesList.get(1), workedHoursList.get(1), BigDecimal.valueOf(additionalSalaryList.get(1)), EmployerType.valueOf(contractTypeList.get(1)));
        Employee employee3 = new Employee(namesList.get(2), workedHoursList.get(2), BigDecimal.valueOf(additionalSalaryList.get(2)), EmployerType.valueOf(contractTypeList.get(2)));
        Employee employee4 = new Employee(namesList.get(3), workedHoursList.get(3), BigDecimal.valueOf(additionalSalaryList.get(3)), EmployerType.valueOf(contractTypeList.get(3)));
        Employee employee5 = new Employee(namesList.get(4), workedHoursList.get(4), BigDecimal.valueOf(additionalSalaryList.get(4)), EmployerType.valueOf(contractTypeList.get(4)));
        Employee employee6 = new Employee(namesList.get(5), workedHoursList.get(5), BigDecimal.valueOf(additionalSalaryList.get(5)), EmployerType.valueOf(contractTypeList.get(5)));
        // Hire all the 6 employees to work at the company

        company.hireEmployee(employee1);
        company.hireEmployee(employee2);
        company.hireEmployee(employee3);
        company.hireEmployee(employee4);
        company.hireEmployee(employee5);
        company.hireEmployee(employee6);

        //System.out.println(employee1.salery());
        // Print the result of calling the method averageSalary()
        System.out.println(company.averageSalary());

        // Increase the additional salary per hour, by calling the method increaseSalaries(). Use increasePercentage as an argument: company.increaseSalaries(BigDecimal.valueOf(increasePercentage));
        company.increaseSalaries(BigDecimal.valueOf(increasePercentage));
        // Print the result of calling the method averageSalary(), after increasing the additional salary per hour of all employees.

        System.out.println(company.averageSalary());
        // Print the result of calling the method averageSalaryByType(). Use the string contractType with ContractType.valueOf() method to pass it as argument: System.out.println(company.averageSalaryByType(ContractType.valueOf(contractType)));

        System.out.println(company.averageSalaryPerContractType(EmployerType.valueOf(contractType)));
        bufferedReader.close();

    }
}
